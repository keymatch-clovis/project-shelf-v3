// dart format width=80
import 'package:drift/internal/versioned_schema.dart' as i0;
import 'package:drift/drift.dart' as i1;
import 'package:drift/drift.dart'; // ignore_for_file: type=lint,unused_import

// GENERATED BY drift_dev, DO NOT MODIFY.
final class Schema2 extends i0.VersionedSchema {
  Schema2({required super.database}) : super(version: 2);
  @override
  late final List<i1.DatabaseSchemaEntity> entities = [
    product,
    city,
    customer,
    invoice,
    invoiceProduct,
    idxUniqueNameNotPendingForDeletion,
  ];
  late final Shape0 product = Shape0(
    source: i0.VersionedTable(
      entityName: 'product',
      withoutRowId: false,
      isStrict: false,
      tableConstraints: [],
      columns: [
        _column_0,
        _column_1,
        _column_2,
        _column_3,
        _column_4,
        _column_5,
        _column_6,
        _column_7,
        _column_8,
      ],
      attachedDatabase: database,
    ),
    alias: null,
  );
  late final Shape1 city = Shape1(
    source: i0.VersionedTable(
      entityName: 'city',
      withoutRowId: false,
      isStrict: false,
      tableConstraints: [],
      columns: [_column_0, _column_1, _column_9],
      attachedDatabase: database,
    ),
    alias: null,
  );
  late final Shape2 customer = Shape2(
    source: i0.VersionedTable(
      entityName: 'customer',
      withoutRowId: false,
      isStrict: false,
      tableConstraints: [],
      columns: [
        _column_0,
        _column_1,
        _column_10,
        _column_11,
        _column_12,
        _column_13,
        _column_6,
        _column_7,
        _column_8,
      ],
      attachedDatabase: database,
    ),
    alias: null,
  );
  late final Shape3 invoice = Shape3(
    source: i0.VersionedTable(
      entityName: 'invoice',
      withoutRowId: false,
      isStrict: false,
      tableConstraints: [],
      columns: [
        _column_0,
        _column_14,
        _column_15,
        _column_16,
        _column_17,
        _column_18,
        _column_6,
        _column_7,
      ],
      attachedDatabase: database,
    ),
    alias: null,
  );
  late final Shape4 invoiceProduct = Shape4(
    source: i0.VersionedTable(
      entityName: 'invoice_product',
      withoutRowId: false,
      isStrict: false,
      tableConstraints: [],
      columns: [
        _column_0,
        _column_19,
        _column_20,
        _column_21,
        _column_22,
        _column_6,
      ],
      attachedDatabase: database,
    ),
    alias: null,
  );
  final i1.Index idxUniqueNameNotPendingForDeletion = i1.Index(
    'idx_unique_name_not_pending_for_deletion',
    'CREATE UNIQUE INDEX IF NOT EXISTS idx_unique_name_not_pending_for_deletion ON product (name) WHERE pending_delete_until IS NULL',
  );
}

class Shape0 extends i0.VersionedTable {
  Shape0({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<int> get id =>
      columnsByName['id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get name =>
      columnsByName['name']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<int> get stock =>
      columnsByName['stock']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<int> get defaultPrice =>
      columnsByName['default_price']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<int> get purchasePrice =>
      columnsByName['purchase_price']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get currencyIsoCode =>
      columnsByName['currency_iso_code']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<DateTime> get createdAt =>
      columnsByName['created_at']! as i1.GeneratedColumn<DateTime>;
  i1.GeneratedColumn<DateTime> get updatedAt =>
      columnsByName['updated_at']! as i1.GeneratedColumn<DateTime>;
  i1.GeneratedColumn<DateTime> get pendingDeleteUntil =>
      columnsByName['pending_delete_until']! as i1.GeneratedColumn<DateTime>;
}

i1.GeneratedColumn<int> _column_0(String aliasedName) =>
    i1.GeneratedColumn<int>(
      'id',
      aliasedName,
      false,
      hasAutoIncrement: true,
      type: i1.DriftSqlType.int,
      defaultConstraints: i1.GeneratedColumn.constraintIsAlways(
        'PRIMARY KEY AUTOINCREMENT',
      ),
    );
i1.GeneratedColumn<String> _column_1(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'name',
      aliasedName,
      false,
      type: i1.DriftSqlType.string,
    );
i1.GeneratedColumn<int> _column_2(String aliasedName) =>
    i1.GeneratedColumn<int>(
      'stock',
      aliasedName,
      false,
      type: i1.DriftSqlType.int,
    );
i1.GeneratedColumn<int> _column_3(String aliasedName) =>
    i1.GeneratedColumn<int>(
      'default_price',
      aliasedName,
      false,
      type: i1.DriftSqlType.int,
    );
i1.GeneratedColumn<int> _column_4(String aliasedName) =>
    i1.GeneratedColumn<int>(
      'purchase_price',
      aliasedName,
      false,
      type: i1.DriftSqlType.int,
    );
i1.GeneratedColumn<String> _column_5(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'currency_iso_code',
      aliasedName,
      false,
      type: i1.DriftSqlType.string,
    );
i1.GeneratedColumn<DateTime> _column_6(String aliasedName) =>
    i1.GeneratedColumn<DateTime>(
      'created_at',
      aliasedName,
      false,
      type: i1.DriftSqlType.dateTime,
    );
i1.GeneratedColumn<DateTime> _column_7(String aliasedName) =>
    i1.GeneratedColumn<DateTime>(
      'updated_at',
      aliasedName,
      false,
      type: i1.DriftSqlType.dateTime,
    );
i1.GeneratedColumn<DateTime> _column_8(String aliasedName) =>
    i1.GeneratedColumn<DateTime>(
      'pending_delete_until',
      aliasedName,
      true,
      type: i1.DriftSqlType.dateTime,
    );

class Shape1 extends i0.VersionedTable {
  Shape1({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<int> get id =>
      columnsByName['id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get name =>
      columnsByName['name']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get department =>
      columnsByName['department']! as i1.GeneratedColumn<String>;
}

i1.GeneratedColumn<String> _column_9(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'department',
      aliasedName,
      false,
      type: i1.DriftSqlType.string,
    );

class Shape2 extends i0.VersionedTable {
  Shape2({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<int> get id =>
      columnsByName['id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get name =>
      columnsByName['name']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get businessName =>
      columnsByName['business_name']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<int> get city =>
      columnsByName['city']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get address =>
      columnsByName['address']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get phoneNumber =>
      columnsByName['phone_number']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<DateTime> get createdAt =>
      columnsByName['created_at']! as i1.GeneratedColumn<DateTime>;
  i1.GeneratedColumn<DateTime> get updatedAt =>
      columnsByName['updated_at']! as i1.GeneratedColumn<DateTime>;
  i1.GeneratedColumn<DateTime> get pendingDeleteUntil =>
      columnsByName['pending_delete_until']! as i1.GeneratedColumn<DateTime>;
}

i1.GeneratedColumn<String> _column_10(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'business_name',
      aliasedName,
      true,
      type: i1.DriftSqlType.string,
    );
i1.GeneratedColumn<int> _column_11(String aliasedName) =>
    i1.GeneratedColumn<int>(
      'city',
      aliasedName,
      false,
      type: i1.DriftSqlType.int,
      defaultConstraints: i1.GeneratedColumn.constraintIsAlways(
        'REFERENCES city (id)',
      ),
    );
i1.GeneratedColumn<String> _column_12(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'address',
      aliasedName,
      true,
      type: i1.DriftSqlType.string,
    );
i1.GeneratedColumn<String> _column_13(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'phone_number',
      aliasedName,
      true,
      type: i1.DriftSqlType.string,
    );

class Shape3 extends i0.VersionedTable {
  Shape3({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<int> get id =>
      columnsByName['id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<int> get number =>
      columnsByName['number']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<DateTime> get date =>
      columnsByName['date']! as i1.GeneratedColumn<DateTime>;
  i1.GeneratedColumn<int> get remainingUnpaidBalance =>
      columnsByName['remaining_unpaid_balance']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<int> get total =>
      columnsByName['total']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<int> get customer =>
      columnsByName['customer']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<DateTime> get createdAt =>
      columnsByName['created_at']! as i1.GeneratedColumn<DateTime>;
  i1.GeneratedColumn<DateTime> get updatedAt =>
      columnsByName['updated_at']! as i1.GeneratedColumn<DateTime>;
}

i1.GeneratedColumn<int> _column_14(String aliasedName) =>
    i1.GeneratedColumn<int>(
      'number',
      aliasedName,
      false,
      type: i1.DriftSqlType.int,
      defaultConstraints: i1.GeneratedColumn.constraintIsAlways('UNIQUE'),
    );
i1.GeneratedColumn<DateTime> _column_15(String aliasedName) =>
    i1.GeneratedColumn<DateTime>(
      'date',
      aliasedName,
      false,
      type: i1.DriftSqlType.dateTime,
    );
i1.GeneratedColumn<int> _column_16(String aliasedName) =>
    i1.GeneratedColumn<int>(
      'remaining_unpaid_balance',
      aliasedName,
      false,
      type: i1.DriftSqlType.int,
    );
i1.GeneratedColumn<int> _column_17(String aliasedName) =>
    i1.GeneratedColumn<int>(
      'total',
      aliasedName,
      false,
      type: i1.DriftSqlType.int,
    );
i1.GeneratedColumn<int> _column_18(String aliasedName) =>
    i1.GeneratedColumn<int>(
      'customer',
      aliasedName,
      false,
      type: i1.DriftSqlType.int,
      defaultConstraints: i1.GeneratedColumn.constraintIsAlways(
        'REFERENCES customer (id)',
      ),
    );

class Shape4 extends i0.VersionedTable {
  Shape4({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<int> get id =>
      columnsByName['id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<int> get invoice =>
      columnsByName['invoice']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<int> get product =>
      columnsByName['product']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<int> get quantity =>
      columnsByName['quantity']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<int> get unitPrice =>
      columnsByName['unit_price']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<DateTime> get createdAt =>
      columnsByName['created_at']! as i1.GeneratedColumn<DateTime>;
}

i1.GeneratedColumn<int> _column_19(String aliasedName) =>
    i1.GeneratedColumn<int>(
      'invoice',
      aliasedName,
      false,
      type: i1.DriftSqlType.int,
      defaultConstraints: i1.GeneratedColumn.constraintIsAlways(
        'REFERENCES invoice (id)',
      ),
    );
i1.GeneratedColumn<int> _column_20(String aliasedName) =>
    i1.GeneratedColumn<int>(
      'product',
      aliasedName,
      false,
      type: i1.DriftSqlType.int,
      defaultConstraints: i1.GeneratedColumn.constraintIsAlways(
        'REFERENCES product (id)',
      ),
    );
i1.GeneratedColumn<int> _column_21(String aliasedName) =>
    i1.GeneratedColumn<int>(
      'quantity',
      aliasedName,
      false,
      type: i1.DriftSqlType.int,
    );
i1.GeneratedColumn<int> _column_22(String aliasedName) =>
    i1.GeneratedColumn<int>(
      'unit_price',
      aliasedName,
      false,
      type: i1.DriftSqlType.int,
    );

final class Schema3 extends i0.VersionedSchema {
  Schema3({required super.database}) : super(version: 3);
  @override
  late final List<i1.DatabaseSchemaEntity> entities = [
    product,
    city,
    customer,
    invoice,
    invoiceProduct,
    idxUniqueNameNotPendingForDeletion,
  ];
  late final Shape0 product = Shape0(
    source: i0.VersionedTable(
      entityName: 'product',
      withoutRowId: false,
      isStrict: false,
      tableConstraints: [],
      columns: [
        _column_0,
        _column_1,
        _column_2,
        _column_3,
        _column_4,
        _column_5,
        _column_6,
        _column_7,
        _column_8,
      ],
      attachedDatabase: database,
    ),
    alias: null,
  );
  late final Shape1 city = Shape1(
    source: i0.VersionedTable(
      entityName: 'city',
      withoutRowId: false,
      isStrict: false,
      tableConstraints: [],
      columns: [_column_0, _column_1, _column_9],
      attachedDatabase: database,
    ),
    alias: null,
  );
  late final Shape2 customer = Shape2(
    source: i0.VersionedTable(
      entityName: 'customer',
      withoutRowId: false,
      isStrict: false,
      tableConstraints: [],
      columns: [
        _column_0,
        _column_1,
        _column_10,
        _column_11,
        _column_12,
        _column_13,
        _column_6,
        _column_7,
        _column_8,
      ],
      attachedDatabase: database,
    ),
    alias: null,
  );
  late final Shape5 invoice = Shape5(
    source: i0.VersionedTable(
      entityName: 'invoice',
      withoutRowId: false,
      isStrict: false,
      tableConstraints: [],
      columns: [
        _column_0,
        _column_14,
        _column_15,
        _column_16,
        _column_17,
        _column_5,
        _column_18,
        _column_6,
        _column_7,
      ],
      attachedDatabase: database,
    ),
    alias: null,
  );
  late final Shape6 invoiceProduct = Shape6(
    source: i0.VersionedTable(
      entityName: 'invoice_product',
      withoutRowId: false,
      isStrict: false,
      tableConstraints: [],
      columns: [
        _column_0,
        _column_19,
        _column_20,
        _column_21,
        _column_22,
        _column_5,
        _column_6,
      ],
      attachedDatabase: database,
    ),
    alias: null,
  );
  final i1.Index idxUniqueNameNotPendingForDeletion = i1.Index(
    'idx_unique_name_not_pending_for_deletion',
    'CREATE UNIQUE INDEX IF NOT EXISTS idx_unique_name_not_pending_for_deletion ON product (name) WHERE pending_delete_until IS NULL',
  );
}

class Shape5 extends i0.VersionedTable {
  Shape5({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<int> get id =>
      columnsByName['id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<int> get number =>
      columnsByName['number']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<DateTime> get date =>
      columnsByName['date']! as i1.GeneratedColumn<DateTime>;
  i1.GeneratedColumn<int> get remainingUnpaidBalance =>
      columnsByName['remaining_unpaid_balance']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<int> get total =>
      columnsByName['total']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get currencyIsoCode =>
      columnsByName['currency_iso_code']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<int> get customer =>
      columnsByName['customer']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<DateTime> get createdAt =>
      columnsByName['created_at']! as i1.GeneratedColumn<DateTime>;
  i1.GeneratedColumn<DateTime> get updatedAt =>
      columnsByName['updated_at']! as i1.GeneratedColumn<DateTime>;
}

class Shape6 extends i0.VersionedTable {
  Shape6({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<int> get id =>
      columnsByName['id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<int> get invoice =>
      columnsByName['invoice']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<int> get product =>
      columnsByName['product']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<int> get quantity =>
      columnsByName['quantity']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<int> get unitPrice =>
      columnsByName['unit_price']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get currencyIsoCode =>
      columnsByName['currency_iso_code']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<DateTime> get createdAt =>
      columnsByName['created_at']! as i1.GeneratedColumn<DateTime>;
}

final class Schema4 extends i0.VersionedSchema {
  Schema4({required super.database}) : super(version: 4);
  @override
  late final List<i1.DatabaseSchemaEntity> entities = [
    product,
    city,
    customer,
    invoice,
    invoiceProduct,
    idxUniqueNameNotPendingForDeletion,
  ];
  late final Shape0 product = Shape0(
    source: i0.VersionedTable(
      entityName: 'product',
      withoutRowId: false,
      isStrict: false,
      tableConstraints: [],
      columns: [
        _column_0,
        _column_1,
        _column_2,
        _column_3,
        _column_4,
        _column_5,
        _column_6,
        _column_7,
        _column_8,
      ],
      attachedDatabase: database,
    ),
    alias: null,
  );
  late final Shape1 city = Shape1(
    source: i0.VersionedTable(
      entityName: 'city',
      withoutRowId: false,
      isStrict: false,
      tableConstraints: [],
      columns: [_column_0, _column_1, _column_9],
      attachedDatabase: database,
    ),
    alias: null,
  );
  late final Shape2 customer = Shape2(
    source: i0.VersionedTable(
      entityName: 'customer',
      withoutRowId: false,
      isStrict: false,
      tableConstraints: [],
      columns: [
        _column_0,
        _column_1,
        _column_10,
        _column_11,
        _column_12,
        _column_13,
        _column_6,
        _column_7,
        _column_8,
      ],
      attachedDatabase: database,
    ),
    alias: null,
  );
  late final Shape5 invoice = Shape5(
    source: i0.VersionedTable(
      entityName: 'invoice',
      withoutRowId: false,
      isStrict: false,
      tableConstraints: [],
      columns: [
        _column_0,
        _column_14,
        _column_15,
        _column_16,
        _column_17,
        _column_5,
        _column_18,
        _column_6,
        _column_7,
      ],
      attachedDatabase: database,
    ),
    alias: null,
  );
  late final Shape7 invoiceProduct = Shape7(
    source: i0.VersionedTable(
      entityName: 'invoice_product',
      withoutRowId: false,
      isStrict: false,
      tableConstraints: [],
      columns: [
        _column_0,
        _column_19,
        _column_20,
        _column_21,
        _column_22,
        _column_5,
        _column_6,
        _column_7,
      ],
      attachedDatabase: database,
    ),
    alias: null,
  );
  final i1.Index idxUniqueNameNotPendingForDeletion = i1.Index(
    'idx_unique_name_not_pending_for_deletion',
    'CREATE UNIQUE INDEX IF NOT EXISTS idx_unique_name_not_pending_for_deletion ON product (name) WHERE pending_delete_until IS NULL',
  );
}

class Shape7 extends i0.VersionedTable {
  Shape7({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<int> get id =>
      columnsByName['id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<int> get invoice =>
      columnsByName['invoice']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<int> get product =>
      columnsByName['product']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<int> get quantity =>
      columnsByName['quantity']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<int> get unitPrice =>
      columnsByName['unit_price']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get currencyIsoCode =>
      columnsByName['currency_iso_code']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<DateTime> get createdAt =>
      columnsByName['created_at']! as i1.GeneratedColumn<DateTime>;
  i1.GeneratedColumn<DateTime> get updatedAt =>
      columnsByName['updated_at']! as i1.GeneratedColumn<DateTime>;
}

i0.MigrationStepWithVersion migrationSteps({
  required Future<void> Function(i1.Migrator m, Schema2 schema) from1To2,
  required Future<void> Function(i1.Migrator m, Schema3 schema) from2To3,
  required Future<void> Function(i1.Migrator m, Schema4 schema) from3To4,
}) {
  return (currentVersion, database) async {
    switch (currentVersion) {
      case 1:
        final schema = Schema2(database: database);
        final migrator = i1.Migrator(database, schema);
        await from1To2(migrator, schema);
        return 2;
      case 2:
        final schema = Schema3(database: database);
        final migrator = i1.Migrator(database, schema);
        await from2To3(migrator, schema);
        return 3;
      case 3:
        final schema = Schema4(database: database);
        final migrator = i1.Migrator(database, schema);
        await from3To4(migrator, schema);
        return 4;
      default:
        throw ArgumentError.value('Unknown migration from $currentVersion');
    }
  };
}

i1.OnUpgrade stepByStep({
  required Future<void> Function(i1.Migrator m, Schema2 schema) from1To2,
  required Future<void> Function(i1.Migrator m, Schema3 schema) from2To3,
  required Future<void> Function(i1.Migrator m, Schema4 schema) from3To4,
}) => i0.VersionedSchema.stepByStepHelper(
  step: migrationSteps(
    from1To2: from1To2,
    from2To3: from2To3,
    from3To4: from3To4,
  ),
);
