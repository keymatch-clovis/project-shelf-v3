// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'adapter/dto/object_box/company_info_dto.dart';
import 'adapter/dto/object_box/invoice_draft_dto.dart';
import 'adapter/dto/object_box/invoice_draft_product_dto.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
    id: const obx_int.IdUid(2, 833941145084202839),
    name: 'InvoiceDraftProductDto',
    lastPropertyId: const obx_int.IdUid(7, 1173272383077814940),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 716964287268226645),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 8039380102461441883),
        name: 'productId',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 5320575668768391215),
        name: 'quantity',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 8677137074340863362),
        name: 'unitPrice',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(7, 1173272383077814940),
        name: 'invoiceId',
        type: 11,
        flags: 520,
        indexId: const obx_int.IdUid(1, 408517580857610983),
        relationTarget: 'InvoiceDraftDto',
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(4, 3763435238713960993),
    name: 'InvoiceDraftDto',
    lastPropertyId: const obx_int.IdUid(5, 7523024191295989311),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 6898686457119238842),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 5559391520846951086),
        name: 'date',
        type: 10,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 1683845735600681603),
        name: 'remainingUnpaidBalance',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 6803376939915848200),
        name: 'customerId',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 7523024191295989311),
        name: 'createdAt',
        type: 10,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[
      obx_int.ModelBacklink(
        name: 'products',
        srcEntity: 'InvoiceDraftProductDto',
        srcField: 'invoice',
      ),
    ],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(5, 5078741930378715441),
    name: 'CompanyInfoDto',
    lastPropertyId: const obx_int.IdUid(7, 6531293236406510964),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 2265623869672100412),
        name: 'id',
        type: 6,
        flags: 129,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 397989745994516482),
        name: 'name',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 745117656448758424),
        name: 'document',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 216745155755810432),
        name: 'email',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 5640262568742950930),
        name: 'phone',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 1258919193332431342),
        name: 'updatedAt',
        type: 10,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(7, 6531293236406510964),
        name: 'logoUri',
        type: 9,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore({
  String? directory,
  int? maxDBSizeInKB,
  int? maxDataSizeInKB,
  int? fileMode,
  int? maxReaders,
  bool queriesCaseSensitiveDefault = true,
  String? macosApplicationGroup,
}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(
    getObjectBoxModel(),
    directory: directory ?? (await defaultStoreDirectory()).path,
    maxDBSizeInKB: maxDBSizeInKB,
    maxDataSizeInKB: maxDataSizeInKB,
    fileMode: fileMode,
    maxReaders: maxReaders,
    queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
    macosApplicationGroup: macosApplicationGroup,
  );
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
    entities: _entities,
    lastEntityId: const obx_int.IdUid(5, 5078741930378715441),
    lastIndexId: const obx_int.IdUid(1, 408517580857610983),
    lastRelationId: const obx_int.IdUid(1, 7112647908102025118),
    lastSequenceId: const obx_int.IdUid(0, 0),
    retiredEntityUids: const [8928238688371058838, 274034651463492387],
    retiredIndexUids: const [],
    retiredPropertyUids: const [
      1429872648420772918,
      5504957862810626207,
      7956238843704801333,
      7502744386021887995,
      7593264896029825046,
      3863485180279580678,
      2335828012991959638,
      8928440876990293375,
      1154369001365028129,
      5155951367029643794,
      1134292592962932140,
    ],
    retiredRelationUids: const [7112647908102025118],
    modelVersion: 5,
    modelVersionParserMinimum: 5,
    version: 1,
  );

  final bindings = <Type, obx_int.EntityDefinition>{
    InvoiceDraftProductDto: obx_int.EntityDefinition<InvoiceDraftProductDto>(
      model: _entities[0],
      toOneRelations: (InvoiceDraftProductDto object) => [object.invoice],
      toManyRelations: (InvoiceDraftProductDto object) => {},
      getId: (InvoiceDraftProductDto object) => object.id,
      setId: (InvoiceDraftProductDto object, int id) {
        object.id = id;
      },
      objectToFB: (InvoiceDraftProductDto object, fb.Builder fbb) {
        fbb.startTable(8);
        fbb.addInt64(0, object.id);
        fbb.addInt64(1, object.productId);
        fbb.addInt64(4, object.quantity);
        fbb.addInt64(5, object.unitPrice);
        fbb.addInt64(6, object.invoice.targetId);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final productIdParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          6,
          0,
        );
        final quantityParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          12,
          0,
        );
        final unitPriceParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          14,
          0,
        );
        final object = InvoiceDraftProductDto(
          productId: productIdParam,
          quantity: quantityParam,
          unitPrice: unitPriceParam,
        )..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
        object.invoice.targetId = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          16,
          0,
        );
        object.invoice.attach(store);
        return object;
      },
    ),
    InvoiceDraftDto: obx_int.EntityDefinition<InvoiceDraftDto>(
      model: _entities[1],
      toOneRelations: (InvoiceDraftDto object) => [],
      toManyRelations: (InvoiceDraftDto object) => {
        obx_int.RelInfo<InvoiceDraftProductDto>.toOneBacklink(
          7,
          object.id,
          (InvoiceDraftProductDto srcObject) => srcObject.invoice,
        ): object.products,
      },
      getId: (InvoiceDraftDto object) => object.id,
      setId: (InvoiceDraftDto object, int id) {
        object.id = id;
      },
      objectToFB: (InvoiceDraftDto object, fb.Builder fbb) {
        fbb.startTable(6);
        fbb.addInt64(0, object.id);
        fbb.addInt64(1, object.date?.millisecondsSinceEpoch);
        fbb.addInt64(2, object.remainingUnpaidBalance);
        fbb.addInt64(3, object.customerId);
        fbb.addInt64(4, object.createdAt.millisecondsSinceEpoch);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final dateValue = const fb.Int64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          6,
        );
        final createdAtParam = DateTime.fromMillisecondsSinceEpoch(
          const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0),
        );
        final dateParam = dateValue == null
            ? null
            : DateTime.fromMillisecondsSinceEpoch(dateValue);
        final remainingUnpaidBalanceParam = const fb.Int64Reader()
            .vTableGetNullable(buffer, rootOffset, 8);
        final customerIdParam = const fb.Int64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          10,
        );
        final object = InvoiceDraftDto(
          createdAt: createdAtParam,
          date: dateParam,
          remainingUnpaidBalance: remainingUnpaidBalanceParam,
          customerId: customerIdParam,
        )..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
        obx_int.InternalToManyAccess.setRelInfo<InvoiceDraftDto>(
          object.products,
          store,
          obx_int.RelInfo<InvoiceDraftProductDto>.toOneBacklink(
            7,
            object.id,
            (InvoiceDraftProductDto srcObject) => srcObject.invoice,
          ),
        );
        return object;
      },
    ),
    CompanyInfoDto: obx_int.EntityDefinition<CompanyInfoDto>(
      model: _entities[2],
      toOneRelations: (CompanyInfoDto object) => [],
      toManyRelations: (CompanyInfoDto object) => {},
      getId: (CompanyInfoDto object) => object.id,
      setId: (CompanyInfoDto object, int id) {
        object.id = id;
      },
      objectToFB: (CompanyInfoDto object, fb.Builder fbb) {
        final nameOffset = object.name == null
            ? null
            : fbb.writeString(object.name!);
        final documentOffset = object.document == null
            ? null
            : fbb.writeString(object.document!);
        final emailOffset = object.email == null
            ? null
            : fbb.writeString(object.email!);
        final phoneOffset = object.phone == null
            ? null
            : fbb.writeString(object.phone!);
        final logoUriOffset = object.logoUri == null
            ? null
            : fbb.writeString(object.logoUri!);
        fbb.startTable(8);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, nameOffset);
        fbb.addOffset(2, documentOffset);
        fbb.addOffset(3, emailOffset);
        fbb.addOffset(4, phoneOffset);
        fbb.addInt64(5, object.updatedAt.millisecondsSinceEpoch);
        fbb.addOffset(6, logoUriOffset);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final updatedAtParam = DateTime.fromMillisecondsSinceEpoch(
          const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0),
        );
        final logoUriParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 16);
        final nameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 6);
        final documentParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 8);
        final emailParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 10);
        final phoneParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 12);
        final object = CompanyInfoDto(
          id: idParam,
          updatedAt: updatedAtParam,
          logoUri: logoUriParam,
          name: nameParam,
          document: documentParam,
          email: emailParam,
          phone: phoneParam,
        );

        return object;
      },
    ),
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [InvoiceDraftProductDto] entity fields to define ObjectBox queries.
class InvoiceDraftProductDto_ {
  /// See [InvoiceDraftProductDto.id].
  static final id = obx.QueryIntegerProperty<InvoiceDraftProductDto>(
    _entities[0].properties[0],
  );

  /// See [InvoiceDraftProductDto.productId].
  static final productId = obx.QueryIntegerProperty<InvoiceDraftProductDto>(
    _entities[0].properties[1],
  );

  /// See [InvoiceDraftProductDto.quantity].
  static final quantity = obx.QueryIntegerProperty<InvoiceDraftProductDto>(
    _entities[0].properties[2],
  );

  /// See [InvoiceDraftProductDto.unitPrice].
  static final unitPrice = obx.QueryIntegerProperty<InvoiceDraftProductDto>(
    _entities[0].properties[3],
  );

  /// See [InvoiceDraftProductDto.invoice].
  static final invoice =
      obx.QueryRelationToOne<InvoiceDraftProductDto, InvoiceDraftDto>(
        _entities[0].properties[4],
      );
}

/// [InvoiceDraftDto] entity fields to define ObjectBox queries.
class InvoiceDraftDto_ {
  /// See [InvoiceDraftDto.id].
  static final id = obx.QueryIntegerProperty<InvoiceDraftDto>(
    _entities[1].properties[0],
  );

  /// See [InvoiceDraftDto.date].
  static final date = obx.QueryDateProperty<InvoiceDraftDto>(
    _entities[1].properties[1],
  );

  /// See [InvoiceDraftDto.remainingUnpaidBalance].
  static final remainingUnpaidBalance =
      obx.QueryIntegerProperty<InvoiceDraftDto>(_entities[1].properties[2]);

  /// See [InvoiceDraftDto.customerId].
  static final customerId = obx.QueryIntegerProperty<InvoiceDraftDto>(
    _entities[1].properties[3],
  );

  /// See [InvoiceDraftDto.createdAt].
  static final createdAt = obx.QueryDateProperty<InvoiceDraftDto>(
    _entities[1].properties[4],
  );

  /// see [InvoiceDraftDto.products]
  static final products =
      obx.QueryBacklinkToMany<InvoiceDraftProductDto, InvoiceDraftDto>(
        InvoiceDraftProductDto_.invoice,
      );
}

/// [CompanyInfoDto] entity fields to define ObjectBox queries.
class CompanyInfoDto_ {
  /// See [CompanyInfoDto.id].
  static final id = obx.QueryIntegerProperty<CompanyInfoDto>(
    _entities[2].properties[0],
  );

  /// See [CompanyInfoDto.name].
  static final name = obx.QueryStringProperty<CompanyInfoDto>(
    _entities[2].properties[1],
  );

  /// See [CompanyInfoDto.document].
  static final document = obx.QueryStringProperty<CompanyInfoDto>(
    _entities[2].properties[2],
  );

  /// See [CompanyInfoDto.email].
  static final email = obx.QueryStringProperty<CompanyInfoDto>(
    _entities[2].properties[3],
  );

  /// See [CompanyInfoDto.phone].
  static final phone = obx.QueryStringProperty<CompanyInfoDto>(
    _entities[2].properties[4],
  );

  /// See [CompanyInfoDto.updatedAt].
  static final updatedAt = obx.QueryDateProperty<CompanyInfoDto>(
    _entities[2].properties[5],
  );

  /// See [CompanyInfoDto.logoUri].
  static final logoUri = obx.QueryStringProperty<CompanyInfoDto>(
    _entities[2].properties[6],
  );
}
